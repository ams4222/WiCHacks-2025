pragma language version >= 0.14.0;

import CompactStandardLibrary;

export enum LOGGED { yes, no }

export ledger logged: Mapping<Bytes<32>, LOGGED>;
export ledger streak: Mapping<Bytes<32>, Counter>;
export ledger entries: Mapping<Bytes<32>, List<ExerciseEntry>>;
//export ledger user: Bytes<32>;
export ledger rewardBalance: Mapping<Bytes<32>, Counter>;

struct ExerciseEntry {
    exerciseType: Opaque<"string">;
    exerciseLength: Opaque<"string">;
    time: UInt64;
}

witness local_secret_key(): Bytes<32>; // User secret key


export circuit addEntry(new_entry: ExerciseEntry): [] {
    let userEntries = entries.get(user).unwrap_or([]);
    let today = get_current_date();
    let alreadyLogged = userEntries.iter().any(|e| e.time == today);

    assert !alreadyLogged || userEntries.length() < 5
        "You've already reached the maximum entries for today.";
    
    userEntries.push(new_entry);
    entries.insert(user, userEntries);
    rewardBalance.get(user).increment(1);
}

export circuit deleteEntry(time: UInt64): [] {
    let userEntries = entries.get(user).unwrap_or([]);

    asser userEntries.length() > 0 "There is nothing to delete";

    userEntries = userEntries.filter(|e| e.time != time);
    entries.insert(user, userEntries);
}

export circuit claimReward(): [] {
    let userReward = rewardBalance.get(user);
    assert userReward.value() > 0 "No rewards to claim, log an exercise to get rewards!";

    send user, userReward.value();
    userReward.reset();
}

export circuit public_key(sk: Bytes<32>, instance: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<3, Bytes<32>>>([pad(32, "exercise:pk:"), instance, sk]);
}